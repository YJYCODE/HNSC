library("clusterProfiler")
library("org.Hs.eg.db")
library("enrichplot")
library("ggplot2")
library("clusterProfiler")
library("org.Hs.eg.db")
library("enrichplot")
library("ggplot2")
cancer <- "HNSC"
pvalueFilter=0.05         #p值过滤条件
qvalueFilter=0.05         #矫正后的p值过滤条件
path <- "E:\\Training\\12-topic-data-analysis\\"
rt=read.table(paste0(path,cancer,"\\3-exp_GO_KEGG\\","id_diff.txt"),
sep="\t",header=T,check.names=F)
library(stringr)
splitEnsembl <- function(Ensembl){
return(str_split(Ensembl,'[.]',simplify = T)[1])
}
rt$Ensembl <- sapply(rt$id,splitEnsembl,simplify = T)
library(AnnotationDbi)
library(org.Hs.eg.db)
rt$EntrezID <- mapIds(org.Hs.eg.db,keys = rt$name,
column = 'ENTREZID',
keytype = 'SYMBOL',
multiVals = 'first')
rt=rt[is.na(rt[,"EntrezID"])==F,]
gene=rt$EntrezID
View(rt)
rt=read.table(paste0(path,cancer,"\\3-exp_GO_KEGG\\","id_diff.txt"),
sep="\t",header=T,check.names=F)
library(stringr)
splitEnsembl <- function(Ensembl){
return(str_split(Ensembl,'[.]',simplify = T)[1])
}
rt$Ensembl <- sapply(rt$id,splitEnsembl,simplify = T)
library(AnnotationDbi)
library(org.Hs.eg.db)
rt$EntrezID <- mapIds(org.Hs.eg.db,keys = rt$name,
column = 'ENTREZID',
keytype = 'SYMBOL',
multiVals = 'first')
View(rt)
？mapIds
?mapIds
org.Hs.eg.db
rt$EntrezID2 <- mapIds(org.Hs.eg.db,keys = rt$Ensembl,
column = 'ENTREZID',
keytype = 'ENSEMBL',
multiVals = 'first')
View(rt)
rt=read.table(paste0(path,cancer,"\\3-exp_GO_KEGG\\","id_diff.txt"),
sep="\t",header=T,check.names=F)
library(stringr)
splitEnsembl <- function(Ensembl){
return(str_split(Ensembl,'[.]',simplify = T)[1])
}
rt$Ensembl <- sapply(rt$id,splitEnsembl,simplify = T)
library(AnnotationDbi)
library(org.Hs.eg.db)
rt$EntrezID1 <- mapIds(org.Hs.eg.db,keys = rt$name,
column = 'ENTREZID',
keytype = 'SYMBOL',
multiVals = 'first')
rt$EntrezID2 <- mapIds(org.Hs.eg.db,keys = rt$Ensembl,
column = 'ENTREZID',
keytype = 'ENSEMBL',
multiVals = 'first')
rt$EntrezID <- ifelse(rt$EntrezID1==NA,rt$EntrezID2,rt$EntrezID1)
View(rt)
View(rt)
rt$EntrezID <- ifelse(is.na(rt$EntrezID1),rt$EntrezID2,rt$EntrezID1)
View(rt)
rt=rt[is.na(rt[,"EntrezID"])==F,]
geneFC=2^rt$logFC
names(geneFC)=gene
colorSel="qvalue"
if(qvalueFilter>0.05){
colorSel="pvalue"
}
kk=enrichGO(gene = gene,OrgDb = org.Hs.eg.db,
pvalueCutoff =1, qvalueCutoff = 1,
ont="all", readable =T) #设置数据库类型、阈值、富集类型
GO=as.data.frame(kk)
GO=GO[GO$pvalue<pvalueFilter,]
View(GO)
write.table(GO,file="GO.txt",sep="\t",quote=F,row.names = F,col.names = T)
View(GO)
kk2 <- enrichKEGG(gene = gene, organism = "hsa", pvalueCutoff =1, qvalueCutoff =1)
KEGG=as.data.frame(kk2)
KEGG=KEGG[KEGG$pvalue<pvalueFilter,]
View(KEGG)
write.table(KEGG,file="KEGG.txt",sep="\t",quote=F,row.names = F)
View(GO)
View(GO)
barplot(kk2, drop = TRUE, showCategory = showNum, color = colorSel)
barplot(kk2, drop = TRUE, showCategory = 10, color = colorSel)
barplot(kk2, drop = TRUE, showCategory = 10, color = "pvalue")
View(KEGG)
colnames(KEGG)
ggplot(data=KEGG, aes(x=Count, y=Description)) +
geom_bar(stat="identity", width=0.8) + coord_flip() +
scale_fill_manual(values = CPCOLS) + theme_test() +
xlab("KEGG pathway") +
theme(axis.text=element_text(face = "bold", color="gray50")) +
labs(title = "The Most Enriched GO Terms")
ggplot(data=KEGG, aes(x=Count, y=Description)) +
geom_bar(stat="identity", width=0.8) + coord_flip() +
theme_test() +
xlab("KEGG pathway") +
theme(axis.text=element_text(face = "bold", color="gray50")) +
labs(title = "The Most Enriched GO Terms")
ggplot(data=KEGG, aes(x=Count, y=Description)) +
geom_bar(stat="identity", width=0.8) +
theme_test() +
xlab("KEGG pathway") +
theme(axis.text=element_text(face = "bold", color="gray50")) +
labs(title = "The Most Enriched GO Terms")+
coord_flip()
ggplot(data=KEGG, aes(x=Count, y=Description)) +
geom_bar(stat="identity", width=0.8) +
theme_test() +
xlab("KEGG pathway") +
theme(axis.text=element_text(face = "bold", color="gray50")) +
labs(title = "The Most Enriched GO Terms")
ggplot(data=KEGG, aes(x=Count, y=Description)) +
geom_bar(stat="identity", width=0.8,color="pvalue") +
theme_test() +
xlab("gene number") +
theme(axis.text=element_text(face = "bold", color="gray50")) +
labs(title = "KEGG pathway")
ggplot(data=KEGG, aes(x=Count, y=Description,fill=pvalue)) +
geom_bar(stat="identity", width=0.8) +
theme_test() +
xlab("gene number") +
theme(axis.text=element_text(face = "bold", color="gray50")) +
labs(title = "KEGG pathway")
data <- data.frame(
name = c("north","south","south-east","north-west","south-west","north-east","west","east"),
val=sample(seq(1,10), 8)
)
library(ggplot2)
library(dplyr)
library(forcats)
View(data)
View(data)
library(dplyr)
library(forcats)
KEGG %>%
mutate(name = fct_reorder(Description, desc(Count))) %>%
ggplot(aes(x=Count, y=Description，fill=pvalue)) +
geom_bar(stat="identity",alpha=.6, width=.4) +
coord_flip() +
xlab("") +
theme_bw()
KEGG %>%
mutate(Description = fct_reorder(Description, desc(Count))) %>%
ggplot(aes(x=Count, y=Description，fill=pvalue)) +
geom_bar(stat="identity",alpha=.6, width=.4) +
coord_flip() +
xlab("") +
theme_bw()
ggplot(data=KEGG, aes(x=Count, y=Description,fill=pvalue)) +
geom_bar(stat="identity", width=0.8) +
theme_test() +
xlab("gene number") +
theme(axis.text=element_text(face = "bold", color="gray50")) +
labs(title = "KEGG pathway")
library(dplyr)
library(forcats)
library(ggplot2)
KEGG %>%
mutate(Description = fct_reorder(Description, desc(Count))) %>%
ggplot(aes(x=Count, y=Description，fill=pvalue)) +
geom_bar(stat="identity",alpha=.6, width=.4) +
coord_flip()
data %>%
mutate(name = fct_reorder(name, val)) %>%
ggplot(aes(x=name, y=val)) +
geom_bar(stat="identity", fill="#f68060", alpha=.6, width=.4) +
coord_flip() +
xlab("") +
theme_bw()
KEGG %>%
mutate(Description = fct_reorder(Description, Count)) %>%
ggplot(aes(x=Count, y=Description，fill=pvalue)) +
geom_bar(stat="identity",alpha=.6, width=.4) +
coord_flip()
KEGG %>%
mutate(Description = fct_reorder(Description, Count)) %>%
ggplot(aes(x=Description, y=Count,fill=pvalue)) +
geom_bar(stat="identity",alpha=.6, width=.4) +
coord_flip()
KEGG %>%
mutate(Description = fct_reorder(Description, Count)) %>%
ggplot(aes(x=Count, y=Description,fill=pvalue)) +
geom_bar(stat="identity",alpha=.6, width=.4) +
coord_flip()
ggplot(data=KEGG, aes(x=Count, y=Description,fill=pvalue)) +
geom_bar(stat="identity", width=0.8) +
theme_test() +
xlab("gene number") +
theme(axis.text=element_text(face = "bold", color="gray50")) +
labs(title = "KEGG pathway")
KEGG %>%
mutate(Description = fct_reorder(Description, Count)) %>%
ggplot(aes(x=Description, y=Count,fill=pvalue)) +
geom_bar(stat="identity",alpha=.6, width=.4) +
coord_flip()
KEGG %>%
mutate(Description = fct_reorder(Description, Count)) %>%
ggplot(aes(x=Description, y=Count,fill=pvalue)) +
geom_bar(stat="identity",alpha=.6, width=.4) +
theme_test() +
xlab("gene number") +
theme(axis.text=element_text(face = "bold", color="gray50")) +
labs(title = "KEGG pathway")+
coord_flip()
colnames(KEGG)
ggplot(KEGG,aes(pvalue,Description))+
geom_point(aes(size=Count,color=-1*log10(pvalue)))+
scale_color_gradient(low="green",high = "red")+ #设置渐变色
labs(color=expression(-log[10](pvalue)),size="Count",
x="pvalue",y="Pathway name",title="KEGG Pathway enrichment")
ggplot(KEGG,aes(pvalue,Description))+
geom_point(aes(size=Count,color=-1*log10(pvalue)))+
scale_color_gradient(low="green",high = "red")+ #设置渐变色
labs(color=expression(-log[10](pvalue)),size="Count",
x="pvalue",y="Pathway name",title="KEGG Pathway enrichment")+
theme_bw()
dotplot(kk, showCategory = showNum, orderBy = "GeneRatio",color = colorSel)
dotplot(kk, showCategory = 10, orderBy = "GeneRatio",color = "pvalue")
KEGG %>%
mutate(Description = fct_reorder(Description, Count)) %>%
ggplot(aes(pvalue,Description))+
geom_point(aes(size=Count,color=-1*log10(pvalue)))+
scale_color_gradient(low="green",high = "red")+ #设置渐变色
labs(color=expression(-log[10](pvalue)),size="Count",
x="pvalue",y="Pathway name",title="KEGG Pathway enrichment")+
theme_bw()
？dotplot
?dotplot
View(data)
View(GO)
GO_BP <- GO[1:10,]
View(GO_BP)
colnames(GO_)
colnames(GO_BP)
ggplot(data=GO_BP, aes(x=Count, y=Description,fill=pvalue)) +
geom_bar(stat="identity", width=0.8) +
theme_test() +
xlab("gene number") +
theme(axis.text=element_text(face = "bold", color="gray50")) +
labs(title = "Top 10 GO Terms")
GO_BP %>%
mutate(Description = fct_reorder(Description, Count)) %>%
ggplot(aes(x=Description, y=Count,fill=pvalue)) +
geom_bar(stat="identity",alpha=.6, width=.4) +
theme_test() +
xlab("gene number") +
theme(axis.text=element_text(face = "bold", color="gray50")) +
labs(title = "KEGG pathway")+
coord_flip()
?labs
ggplot(GO_BP,aes(pvalue,Description))+
geom_point(aes(size=Count,color=-1*log10(pvalue)))+
scale_color_gradient(low="green",high = "red")+ #设置渐变色
labs(color=expression(-log[10](pvalue)),size="Count",
x="pvalue",y="GO name",title="Top 10 GO terms")+
theme_bw()
ggplot(GO_BP,aes(pvalue,Description))+
geom_point(aes(size=Count,color=-1*log10(pvalue)))+
scale_color_gradient(low="green",high = "red")+ #设置渐变色
labs(color=expression(-log[10](pvalue)),size="Count",
x="pvalue",y="GO name",title="Top 10 GO terms")+
theme_bw()+
theme(axis.text = element_text(angle = 90))
ggplot(GO_BP,aes(pvalue,Description))+
geom_point(aes(size=Count,color=-1*log10(pvalue)))+
scale_color_gradient(low="green",high = "red")+ #设置渐变色
labs(color=expression(-log[10](pvalue)),size="Count",
x="pvalue",y="GO name",title="Top 10 GO terms")+
theme_bw()+
theme(axis.text.x = element_text(angle = 90))
library(limma) ##avereps函数
library(estimate)
library(data.table)
cancer <- "HNSC"
path <- "E:\\Training\\12-topic-data-analysis\\"
inputFile=paste0(path,cancer,"\\1-data\\",cancer,"_FPKM.txt")
sample_group <- read.table(paste0(path,cancer,"\\1-data\\",cancer,"_FPKM_group.txt"),
sep = "\t",header = T)
data=as.matrix(fread(inputFile,sep="\t",header=T,check.names=F))
rownames(data)=as.character(data[,2])
exp=data[,3:ncol(data)]
dimnames=list(rownames(exp),colnames(exp))
data=matrix(as.numeric(as.matrix(exp)),nrow=nrow(exp),dimnames=dimnames)
data=avereps(data) ## 对同一个基因多行的数据，取均值
out=data[rowMeans(data)>0,] # 过滤表达值低的基因(所有样本中全为0的基因)
out=rbind(ID=colnames(out),out)
dir.create(paste0(path,cancer,"\\4-imm\\"))
write.table(out,file=paste0(path,cancer,"\\4-imm\\","uniq.symbol.txt"),
sep="\t",quote=F,col.names=F)
setwd(paste0(path,cancer,"\\4-imm\\"))
filterCommonGenes(input.f="uniq.symbol.txt",
output.f="commonGenes.gct",
id="GeneSymbol")
estimateScore(input.ds = "commonGenes.gct",
output.ds="estimateScore.gct",
platform="illumina")
scores=read.table("estimateScore.gct",skip = 2,header = T)
rownames(scores)=scores[,1]
scores=t(scores[,3:ncol(scores)])
rownames(scores)=gsub("\\.","\\-",rownames(scores))
scores <- cbind(rownames(scores),scores)
colnames(scores) <- c("sample","StromalScore","ImmuneScore","ESTIMATEScore")
out <- merge(scores,sample_group[,c(1,7)],by.x="sample",by.y="sample_barcode",
all.x=T)
write.table(out,file="scores.txt",sep="\t",quote=F,col.names=T,row.names = F)
wilcox.test(as.numeric(out[out$group=="ecDNA -",2]),
as.numeric(out[out$group=="ecDNA +",2]))
boxplot(as.numeric(out[out$group=="ecDNA -",2]),
as.numeric(out[out$group=="ecDNA +",2]),
names=c("ecDNA -","ecDNA +"),
col=c("blue","red"),
pch=20,
main="StromalScore")
wilcox.test(as.numeric(out[out$group=="ecDNA -",3]),
as.numeric(out[out$group=="ecDNA +",3]))
boxplot(as.numeric(out[out$group=="ecDNA -",3]),
as.numeric(out[out$group=="ecDNA +",3]),
names=c("ecDNA -","ecDNA +"),
col=c("blue","red"),
pch=20,
main="ImmuneScore")
library(limma)
cancer <- "HNSC"
path <- "E:\\Training\\12-topic-data-analysis\\"
inputFile=paste0(path,cancer,"\\1-data\\",cancer,"_FPKM.txt")
data=as.matrix(fread(inputFile,sep="\t",header=T,check.names=F))
rownames(data)=as.character(data[,2])
exp=data[,3:ncol(data)]
dimnames=list(rownames(exp),colnames(exp))
data=matrix(as.numeric(as.matrix(exp)),nrow=nrow(exp),dimnames=dimnames)
data=avereps(data) ## 对同一个基因多行的数据，取均值
out=data[rowMeans(data)>0,] # 过滤表达值低的基因(所有样本中全为0的基因)
v <-voom(data, plot = F, save.plot = F) # limma包voom函数，可以把RNA-seq的数据标准化为类似芯片数据的结果
out=v$E
out=rbind(ID=colnames(out),out)
write.table(out,file=paste0(path,cancer,"\\4-imm\\cibersort\\","uniq.symbol.txt"),
sep="\t",quote=F,col.names=F,row.names = T)
dir.create(paste0(path,cancer,"\\4-imm\\cibersort\\"))
write.table(out,file=paste0(path,cancer,"\\4-imm\\cibersort\\","uniq.symbol.txt"),
sep="\t",quote=F,col.names=F,row.names = T)
setwd(paste0(path,cancer,"\\4-imm\\cibersort\\"))
source(paste0(path,"CIBERSORT.R"))
results=CIBERSORT(paste0(path,"ref.txt"), "uniq.symbol.txt", perm=100, QN=TRUE)
source(paste0(path,"CIBERSORT.R"))
results=CIBERSORT(paste0(path,"ref.txt"), "uniq.symbol.txt", perm=100, QN=TRUE)
library(limma)
